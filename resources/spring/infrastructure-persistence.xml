<?xml version="1.0"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/cache	http://www.springframework.org/schema/cache/spring-cache.xsd"
		default-lazy-init="true">

	<!-- 开启spring mvc、spring以及spring transaction的注解功能 -->
	<mvc:annotation-driven />
	
	<!-- 自动bean创建以及自动依赖注入 -->
	<context:annotation-config />
	<context:component-scan base-package="com.sinosoft.platform" />
	<context:component-scan base-package="com.sinosoft.ummp" />
	
	<!-- 自动以配置Bean工厂 -->
	<bean class="com.sinosoft.platform.core.spring.BeanFactory"></bean>
	
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="UTF-8" />
	
	<!-- 注意该部分的key值在context-datasource-jndi(jdbc).xml 中配置 -->
	<bean id="dataSource" class="com.sinosoft.platform.core.spring.DynamicDataSource">
		<!-- 通过key-value的形式来关联数据源 -->
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<!-- 新增数据源绑定，value-ref 与 JDBC 的配置必须相同 -->
				<entry value-ref="dataSourceUMP" key="dataSourceUMP"></entry>
				<entry value-ref="dataSourceODS" key="dataSourceODS"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSourceUMP" />
	</bean>

	<!-- 配置sqlSessionFactory 配置Mapper的数据库配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<value>
				classpath:mybatis/**/*Mapper.xml
		    </value>
		</property>
		<property name="configLocation" value="classpath:mybatis/mybatis-configuration.xml" />
	</bean>
	
	<!-- SqlSession 配置依赖于 sqlSessionFactory -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	  <constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	<!-- mybatis的配置项  语句映射器:自动扫描入住 开始，配置MapperXml与Mapper的关联,basePackage可以指定多个，以分号隔开 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 根据项目需要：配置所有 domain.mapper 的路径 -->
		<property name="basePackage" 
		value="com.sinosoft.platform.core.domain.mapper;
			   com.sinosoft.platform.quartz.domain.mapper;
			   com.sinosoft.ummp.domain.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!-- 事务管理器配置, 使用jdbc事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<!--多线程执行器-->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="5"/>
		<property name="maxPoolSize" value="10"/>
		<property name="queueCapacity" value="30"/>
	</bean>
</beans>