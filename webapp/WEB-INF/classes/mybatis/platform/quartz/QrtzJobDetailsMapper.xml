<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sinosoft.platform.quartz.domain.mapper.QrtzJobDetailsMapper">
  <resultMap id="BaseResultMap" type="com.sinosoft.platform.quartz.domain.model.QrtzJobDetails">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    <id column="JOB_NAME" jdbcType="VARCHAR" property="jobName" />
    <id column="JOB_GROUP" jdbcType="VARCHAR" property="jobGroup" />
    <result column="DESCRIPTION" jdbcType="VARCHAR" property="description" />
    <result column="JOB_CLASS_NAME" jdbcType="VARCHAR" property="jobClassName" />
    <result column="IS_DURABLE" jdbcType="VARCHAR" property="isDurable" />
    <result column="IS_VOLATILE" jdbcType="VARCHAR" property="isVolatile" />
    <result column="IS_STATEFUL" jdbcType="VARCHAR" property="isStateful" />
    <result column="REQUESTS_RECOVERY" jdbcType="VARCHAR" property="requestsRecovery" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.sinosoft.platform.quartz.domain.model.QrtzJobDetails">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    <result column="JOB_DATA" jdbcType="BLOB" property="jobData" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    JOB_NAME, JOB_GROUP, DESCRIPTION, JOB_CLASS_NAME, IS_DURABLE, IS_VOLATILE, IS_STATEFUL, 
    REQUESTS_RECOVERY
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    JOB_DATA
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.sinosoft.platform.quartz.domain.model.QrtzJobDetailsExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from QRTZ_JOB_DETAILS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.sinosoft.platform.quartz.domain.model.QrtzJobDetailsExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from QRTZ_JOB_DETAILS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.sinosoft.platform.quartz.domain.model.QrtzJobDetailsKey" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from QRTZ_JOB_DETAILS
    where JOB_NAME = #{jobName,jdbcType=VARCHAR}
      and JOB_GROUP = #{jobGroup,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.sinosoft.platform.quartz.domain.model.QrtzJobDetailsKey">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    delete from QRTZ_JOB_DETAILS
    where JOB_NAME = #{jobName,jdbcType=VARCHAR}
      and JOB_GROUP = #{jobGroup,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.sinosoft.platform.quartz.domain.model.QrtzJobDetailsExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    delete from QRTZ_JOB_DETAILS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.sinosoft.platform.quartz.domain.model.QrtzJobDetails">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    insert into QRTZ_JOB_DETAILS (JOB_NAME, JOB_GROUP, DESCRIPTION, 
      JOB_CLASS_NAME, IS_DURABLE, IS_VOLATILE, 
      IS_STATEFUL, REQUESTS_RECOVERY, JOB_DATA
      )
    values (#{jobName,jdbcType=VARCHAR}, #{jobGroup,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, 
      #{jobClassName,jdbcType=VARCHAR}, #{isDurable,jdbcType=VARCHAR}, #{isVolatile,jdbcType=VARCHAR}, 
      #{isStateful,jdbcType=VARCHAR}, #{requestsRecovery,jdbcType=VARCHAR}, #{jobData,jdbcType=BLOB}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.sinosoft.platform.quartz.domain.model.QrtzJobDetails">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    insert into QRTZ_JOB_DETAILS
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="jobName != null">
        JOB_NAME,
      </if>
      <if test="jobGroup != null">
        JOB_GROUP,
      </if>
      <if test="description != null">
        DESCRIPTION,
      </if>
      <if test="jobClassName != null">
        JOB_CLASS_NAME,
      </if>
      <if test="isDurable != null">
        IS_DURABLE,
      </if>
      <if test="isVolatile != null">
        IS_VOLATILE,
      </if>
      <if test="isStateful != null">
        IS_STATEFUL,
      </if>
      <if test="requestsRecovery != null">
        REQUESTS_RECOVERY,
      </if>
      <if test="jobData != null">
        JOB_DATA,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="jobName != null">
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobGroup != null">
        #{jobGroup,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="jobClassName != null">
        #{jobClassName,jdbcType=VARCHAR},
      </if>
      <if test="isDurable != null">
        #{isDurable,jdbcType=VARCHAR},
      </if>
      <if test="isVolatile != null">
        #{isVolatile,jdbcType=VARCHAR},
      </if>
      <if test="isStateful != null">
        #{isStateful,jdbcType=VARCHAR},
      </if>
      <if test="requestsRecovery != null">
        #{requestsRecovery,jdbcType=VARCHAR},
      </if>
      <if test="jobData != null">
        #{jobData,jdbcType=BLOB},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.sinosoft.platform.quartz.domain.model.QrtzJobDetailsExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    select count(*) from QRTZ_JOB_DETAILS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    update QRTZ_JOB_DETAILS
    <set>
      <if test="record.jobName != null">
        JOB_NAME = #{record.jobName,jdbcType=VARCHAR},
      </if>
      <if test="record.jobGroup != null">
        JOB_GROUP = #{record.jobGroup,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null">
        DESCRIPTION = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.jobClassName != null">
        JOB_CLASS_NAME = #{record.jobClassName,jdbcType=VARCHAR},
      </if>
      <if test="record.isDurable != null">
        IS_DURABLE = #{record.isDurable,jdbcType=VARCHAR},
      </if>
      <if test="record.isVolatile != null">
        IS_VOLATILE = #{record.isVolatile,jdbcType=VARCHAR},
      </if>
      <if test="record.isStateful != null">
        IS_STATEFUL = #{record.isStateful,jdbcType=VARCHAR},
      </if>
      <if test="record.requestsRecovery != null">
        REQUESTS_RECOVERY = #{record.requestsRecovery,jdbcType=VARCHAR},
      </if>
      <if test="record.jobData != null">
        JOB_DATA = #{record.jobData,jdbcType=BLOB},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    update QRTZ_JOB_DETAILS
    set JOB_NAME = #{record.jobName,jdbcType=VARCHAR},
      JOB_GROUP = #{record.jobGroup,jdbcType=VARCHAR},
      DESCRIPTION = #{record.description,jdbcType=VARCHAR},
      JOB_CLASS_NAME = #{record.jobClassName,jdbcType=VARCHAR},
      IS_DURABLE = #{record.isDurable,jdbcType=VARCHAR},
      IS_VOLATILE = #{record.isVolatile,jdbcType=VARCHAR},
      IS_STATEFUL = #{record.isStateful,jdbcType=VARCHAR},
      REQUESTS_RECOVERY = #{record.requestsRecovery,jdbcType=VARCHAR},
      JOB_DATA = #{record.jobData,jdbcType=BLOB}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    update QRTZ_JOB_DETAILS
    set JOB_NAME = #{record.jobName,jdbcType=VARCHAR},
      JOB_GROUP = #{record.jobGroup,jdbcType=VARCHAR},
      DESCRIPTION = #{record.description,jdbcType=VARCHAR},
      JOB_CLASS_NAME = #{record.jobClassName,jdbcType=VARCHAR},
      IS_DURABLE = #{record.isDurable,jdbcType=VARCHAR},
      IS_VOLATILE = #{record.isVolatile,jdbcType=VARCHAR},
      IS_STATEFUL = #{record.isStateful,jdbcType=VARCHAR},
      REQUESTS_RECOVERY = #{record.requestsRecovery,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sinosoft.platform.quartz.domain.model.QrtzJobDetails">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    update QRTZ_JOB_DETAILS
    <set>
      <if test="description != null">
        DESCRIPTION = #{description,jdbcType=VARCHAR},
      </if>
      <if test="jobClassName != null">
        JOB_CLASS_NAME = #{jobClassName,jdbcType=VARCHAR},
      </if>
      <if test="isDurable != null">
        IS_DURABLE = #{isDurable,jdbcType=VARCHAR},
      </if>
      <if test="isVolatile != null">
        IS_VOLATILE = #{isVolatile,jdbcType=VARCHAR},
      </if>
      <if test="isStateful != null">
        IS_STATEFUL = #{isStateful,jdbcType=VARCHAR},
      </if>
      <if test="requestsRecovery != null">
        REQUESTS_RECOVERY = #{requestsRecovery,jdbcType=VARCHAR},
      </if>
      <if test="jobData != null">
        JOB_DATA = #{jobData,jdbcType=BLOB},
      </if>
    </set>
    where JOB_NAME = #{jobName,jdbcType=VARCHAR}
      and JOB_GROUP = #{jobGroup,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.sinosoft.platform.quartz.domain.model.QrtzJobDetails">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    update QRTZ_JOB_DETAILS
    set DESCRIPTION = #{description,jdbcType=VARCHAR},
      JOB_CLASS_NAME = #{jobClassName,jdbcType=VARCHAR},
      IS_DURABLE = #{isDurable,jdbcType=VARCHAR},
      IS_VOLATILE = #{isVolatile,jdbcType=VARCHAR},
      IS_STATEFUL = #{isStateful,jdbcType=VARCHAR},
      REQUESTS_RECOVERY = #{requestsRecovery,jdbcType=VARCHAR},
      JOB_DATA = #{jobData,jdbcType=BLOB}
    where JOB_NAME = #{jobName,jdbcType=VARCHAR}
      and JOB_GROUP = #{jobGroup,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sinosoft.platform.quartz.domain.model.QrtzJobDetails">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 06 17:03:54 CST 2016.
    -->
    update QRTZ_JOB_DETAILS
    set DESCRIPTION = #{description,jdbcType=VARCHAR},
      JOB_CLASS_NAME = #{jobClassName,jdbcType=VARCHAR},
      IS_DURABLE = #{isDurable,jdbcType=VARCHAR},
      IS_VOLATILE = #{isVolatile,jdbcType=VARCHAR},
      IS_STATEFUL = #{isStateful,jdbcType=VARCHAR},
      REQUESTS_RECOVERY = #{requestsRecovery,jdbcType=VARCHAR}
    where JOB_NAME = #{jobName,jdbcType=VARCHAR}
      and JOB_GROUP = #{jobGroup,jdbcType=VARCHAR}
  </update>
  
  <sql id="selectHomeWorkCondition">
  		
  </sql> 
  
  <!-- 查询总数 -->
  <select id="queryHomeWorkCounts"  resultType="java.lang.Integer">
  			select count(1) from QRTZ_TRIGGERS q where 1=1
  </select>
  
  <!-- 分页查询 -->
  <select id="queryHomeWorkListInfo" parameterType="java.util.Map" resultType="java.util.Map">
  	select tAlias.* from
		(
	         select nAlias.*, rownum r_rownum from
	         (		
				  select trigger_name "trigger_name",
				       trigger_group "trigger_group",
				       job_name "job_name",
				       (select a.description from qrtz_job_details a where a.job_name = q.job_name and a.job_group = q.job_group) "taskName",
				       TO_CHAR(next_fire_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS') "lastTime",
				       (case when prev_fire_time = -1 then
                        ''
                        else 
	                   TO_CHAR(prev_fire_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')   
	                   end) "prev_fire_time",
	                   q.description "description",
				       trigger_state "trigger_state",
				       trigger_type "trigger_type",
				       TO_CHAR(start_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS') "start_time",
				        (case when end_time = 0  then
                         ''
                         else TO_CHAR(end_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS') 
                         end) "end_time",
				       (select cron_expression
				          from qrtz_cron_triggers
				         where q.trigger_name = trigger_name
				           and q.trigger_group = trigger_group) as "cron_expression",
				       (select (case repeat_count when  -1 then -1
                               else repeat_count+1 end) 
                    			from qrtz_simple_triggers
                   			where q.trigger_name = trigger_name
                     	and q.trigger_group = trigger_group)  as  "repeat_count",
				       (select repeat_interval / 1000
				          from qrtz_simple_triggers
				         where q.trigger_name = trigger_name
				           and q.trigger_group = trigger_group) as "repeat_interval",
				       (select times_triggered
				          from qrtz_simple_triggers
				         where q.trigger_name = trigger_name
				           and q.trigger_group = trigger_group) as "times_triggered"
					  from QRTZ_TRIGGERS q
					  where 1 = 1
		  	 ) nAlias
		) tAlias where r_rownum >=#{queryStartIndex} and #{queryEndIndex} >= r_rownum
  </select>
  
  
  
  <!-- 附带条件查询 -->
   <sql id="selectSqlCondition">
		<if test="validity!=null and validity!=''">
               and tds.es_status = #{validity}
        </if> 
	  	<if test="algorithmCoding!=null and algorithmCoding!=''">
	         and tds.sql_code like '%${algorithmCoding}%'
	    </if>
	    <if test="sqlDesc!=null and sqlDesc!=''">
	         and tds.sql_desc like '%${sqlDesc}%'
	    </if>
	    <if test="dataSourceName!=null and dataSourceName!=''">
	         and dj.jdbc_code like '%${dataSourceName}%'
	    </if>    
  </sql> 
  
   <!-- 查询总数 -->
  <select id="queryGetDataCounts"  resultType="java.lang.Integer">
  			select   count(1) 
			from T_DEF_SQL tds
			LEFT JOIN t_def_code_dict cd ON cd.code=tds.es_status
			left join t_def_sql_info ts on tds.sql_id=ts.sql_id
			left join t_def_jdbc dj on dj.id=tds.SQL_FROM_JDBC_ID 
			where  cd.code_type='USER_STATUS'
			and tds.sub_buss_type = 'BATCH_CONFIG'
  			<include refid="selectSqlCondition"/>
  </select>
  
  <!-- 分页查询 -->
  <select id="queryGetDataListInfo" parameterType="java.util.Map" resultType="java.util.Map">
  	select tAlias.* from
		(
	         select nAlias.*, rownum r_rownum from
	         (		
				  select    distinct
	         		  tds.sql_id 	"id",  
	  			  	  dj.jdbc_code "jdbcCode",
	         		  tds.sql_desc "sqlDesc",
	  			      cd.code_alias "code_alias",
	  			      tds.es_status "esStatus",
	        		  tds.sql_code "sqlCode"
					  from T_DEF_SQL tds
					  LEFT JOIN t_def_code_dict cd ON cd.code=tds.es_status
					  left join t_def_sql_info ts on tds.sql_id=ts.sql_id
					  left join t_def_jdbc dj on dj.id=tds.SQL_FROM_JDBC_ID 
					  where  cd.code_type='USER_STATUS'
					  and tds.sub_buss_type = 'BATCH_CONFIG'
					<include refid="selectSqlCondition"/>
					order by "id" desc
		  	 ) nAlias
		) tAlias where r_rownum >=#{queryStartIndex} and #{queryEndIndex} >= r_rownum
  </select>
  
  <!-- 查询总数 -->
  <select id="queryMonitoringCounts"  resultType="java.lang.Integer">
  			select count(1) from QRTZ_TRIGGERS q where 1=1
  </select>
  
  <!-- 实时监控信息列表分页查询 -->
  <select id="queryMonitoringListInfo" parameterType="java.util.Map" resultType="java.util.Map">
  	select tAlias.* from
		(
	         select nAlias.*, rownum r_rownum from
	         (		
				select trigger_name "trigger_name",
				       job_name "job_name",
				       (select a.description
	                    from qrtz_job_details a
	                    where a.JOB_NAME = q.job_name
	                    and a.JOB_GROUP = q.job_group) as "taskName",
	                   q.description "description",
				       <!-- 上次运行开始时间 -->
				       (case when prev_fire_time = -1 then
                        ''
                        else 
	                   TO_CHAR(prev_fire_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')   
	                   end) "prev_fire_time",
	                   <!-- 下次运行时间 -->
				       TO_CHAR(next_fire_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS') "lastTime",
				       <!-- 下次运行倒计时 -->
				         floor(to_number((to_date((TO_CHAR(next_fire_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')),'YYYY-MM-DD HH24:MI:SS')) -  (select sysdate from dual))) || '天' ||
		                 floor(to_number((to_date((TO_CHAR(next_fire_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')),'YYYY-MM-DD HH24:MI:SS')) -  (select sysdate from dual))*24) || '时' ||
		                 
		                 floor((to_number((to_date((TO_CHAR(next_fire_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')),'YYYY-MM-DD HH24:MI:SS')) -  (select sysdate from dual))*24*60) - 
		                 floor(to_number((to_date((TO_CHAR(next_fire_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')),'YYYY-MM-DD HH24:MI:SS')) -  (select sysdate from dual)))* 24 * 60 -
		                 floor(to_number((to_date((TO_CHAR(next_fire_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')),'YYYY-MM-DD HH24:MI:SS')) -  (select sysdate from dual))*24 ) * 60) || '分' ||
		                  
		                 round(to_number((to_date((TO_CHAR(next_fire_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')),'YYYY-MM-DD HH24:MI:SS')) -  (select sysdate from dual))*24*60*60-
		                 floor(to_number((to_date((TO_CHAR(next_fire_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')),'YYYY-MM-DD HH24:MI:SS')) -  (select sysdate from dual)))*24*60*60-
		                 floor(to_number((to_date((TO_CHAR(next_fire_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')),'YYYY-MM-DD HH24:MI:SS')) -  (select sysdate from dual))*24)*60*60-
		                 floor((to_number((to_date((TO_CHAR(next_fire_time / (1000 * 60 * 60 * 24)+ TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')),'YYYY-MM-DD HH24:MI:SS')) -  (select sysdate from dual))*24*60) - 
		                 floor(to_number((to_date((TO_CHAR(next_fire_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')),'YYYY-MM-DD HH24:MI:SS')) -  (select sysdate from dual)))* 24 * 60 -
		                 floor(to_number((to_date((TO_CHAR(next_fire_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')),'YYYY-MM-DD HH24:MI:SS')) -  (select sysdate from dual))*24 ) * 60)*60) || '秒' as "countDown" ,
				       <!-- 触发器状态 -->
				       trigger_state "trigger_state",
				       <!-- 开始时间 -->
				       TO_CHAR(start_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS') "start_time",
				        <!-- 结束时间 -->
				        (case when end_time = 0  then
                         ''
                         else TO_CHAR(end_time / (1000 * 60 * 60 * 24) + TO_DATE('1970-01-01 8:00:00', 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS') 
                         end) "end_time"
					  from QRTZ_TRIGGERS q
					  where 1 = 1
		  	 ) nAlias
		) tAlias where r_rownum >=#{queryStartIndex} and #{queryEndIndex} >= r_rownum
  </select>
  
  
  <!-- 批处理日志附带条件查询 -->
   <sql id="selectBatchLogCondition">
		<if test="homework!=null and homework!=''">
               and a.job_name = #{homework}
        </if> 
	  	<if test="run_mode!=null and run_mode!=''">
	         and a.execute_type = #{run_mode}
	    </if>
	    <if test="startDate!=null and startDate!=''">
	         and TO_DATE(a.start_time,'YYYY-MM-DD HH24:MI:SS') <![CDATA[>=]]> TO_DATE(#{startDate},'YYYY-MM-DD HH24:MI:SS')
	    </if> 
	    <if test="endDate!=null and endDate!=''">
	         and TO_DATE(a.end_time,'YYYY-MM-DD HH24:MI:SS')   <![CDATA[<=]]> TO_DATE(#{endDate},'YYYY-MM-DD HH24:MI:SS')
	    </if>   
  </sql> 
  
   <!-- 批处理日志查询总数 -->
  <select id="queryBatchLogCounts"  resultType="java.lang.Integer">
  			select count(1) from qrtz_trigger_log a where 1=1 
  			<include refid="selectBatchLogCondition"/>
  </select>
  
  <!-- 批处理日志分页查询 -->
  <select id="queryBatchLogListInfo" parameterType="java.util.Map" resultType="java.util.Map">
  	select tAlias.* from
		(
	         select nAlias.*, rownum r_rownum from
	         (		
				     
				select  a.id "id",
						a.job_name "job_name" ,
		             	b.description "taskName",
						a.job_desc "description",
					    a.start_time "start_time",
					    a.end_time "end_time",
					    case when a.execute_type = 0 then '计划任务'
			                 when a.execute_type = 1 then '手动执行'
			            else '' end   "executeType",                            
			            nvl(c.trigger_state , '已结束') "runStatus", 
                        a.log_msg "logMsg"
				from qrtz_trigger_log a
                left join qrtz_job_details b  on b.job_name = a.job_name
                left join qrtz_triggers c on  c.trigger_name = a.trigger_name
				where 1 = 1
				<include refid="selectBatchLogCondition"/>
				ORDER BY a.START_TIME DESC
		  	 ) nAlias
		) tAlias where r_rownum >=#{queryStartIndex} and #{queryEndIndex} >= r_rownum
  </select>
  
</mapper>